import { Dependency, ProjectReport, ContentResolver } from "../interfaces";
export declare class DependencyAssembler {
    workingDir: string;
    constructor(workingDir: string);
    /**
     * This will fetch all project dependencies, merge all baseContexts and fetch, parse, and merge all googleapis
     * content.
     * @returns {Promise<ProjectReport>}
     */
    assemble(): Promise<ProjectReport>;
    /**
     * This method takes a rootDepDir string and returns a promise containing an ordered array of dependencies. Deps[0]
     * is the most-basic dependency; Deps[Deps.length - 1] is the project in rootDepDir.
     * @param rootDepDir - directory for starting dependency
     * @returns {Promise<Dependency[]>} - ordered list of dependencies
     */
    static buildDependencies(rootDepDir: string): Promise<Dependency[]>;
    /**
     * Generates a Node on the dependency tree.
     * @param dir
     * @param calledBy
     * @returns {Promise<NodeReport>}
     */
    private static reportOnDep(dir);
    /**
     * This method creates an ordered array of dependencies by following the specified node all the way to it's root
     * @param nodeReport
     * @param settingsArr
     * @param visited
     * @throws CircularDepError - thrown when a $currNode has a dependency on a node that depends on $currNode
     * @returns {Array<Dependency>}
     */
    private static followLeaves(nodeReport, settingsArr, visited);
    /**
     * Gathers projectSettings file from specified directory and initializes then merges with default
     * @param dir
     * @returns {Promise<Dependency>}
     */
    static gatherSettings(dir: any): Promise<Dependency>;
    static setDepDefaults(settings: Dependency): Dependency;
    /**
     * Takes and array of dependencies, gathers baseContext (if any), and then merges child contexts onto root context.
     * @param deps
     * @returns {Promise<any>}
     */
    static buildContext(deps: Array<Dependency>): Promise<any>;
    /**
     * Looks for and resolves a baseContext.js file if it exists in the directory. If ENOENT, resolves with an empty
     * object.
     * @param searchDir
     * @returns {Promise<any>}
     */
    static gatherContext(searchDir: string): Promise<any>;
    /**
     * Gathers and merges content objects from deps if any
     * @param deps
     * @returns {Promise<Any>}
     */
    static buildContent(deps: Dependency[]): Promise<any>;
    /**
     * Takes a resolver and returns the content it points to after passing it through the parser function. Defaults to
     * aml parser if none is specified.
     * @param resolver - Dependency content resolver taken from projectSettings.js for a project
     * @returns {Promise<Any>}
     */
    static fetchContent(resolver: ContentResolver): Promise<any>;
}
