"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const glob = require("glob");
const fs_extra_1 = require("fs-extra");
function copyProm(src, targ) {
    return new Promise((resolve, reject) => {
        fs_extra_1.copy(src, targ, { clobber: true }, (err) => {
            if (err) {
                return reject(err);
            }
            return resolve();
        });
    });
}
exports.copyProm = copyProm;
function globProm(path, cwd) {
    return new Promise((resolve, reject) => {
        glob(path, {
            cwd: cwd ? cwd : process.cwd()
        }, (err, paths) => {
            if (err) {
                return reject(err);
            }
            return resolve(paths);
        });
    });
}
exports.globProm = globProm;
function existsProm(path) {
    return new Promise((resolve, reject) => {
        fs_extra_1.stat(path, (err, stats) => {
            if (err)
                return reject(err);
            return resolve({ file: stats.isFile(), dir: stats.isDirectory() });
        });
    });
}
exports.existsProm = existsProm;
function createDir(path) {
    return new Promise((resolve, reject) => {
        fs_extra_1.ensureDir(path, (err) => {
            if (err) {
                return reject(err);
            }
            return resolve();
        });
    });
}
exports.createDir = createDir;
function asyncMap(array, f) {
    return __awaiter(this, void 0, Promise, function* () {
        let returns = [];
        for (let item of array) {
            returns.push(yield f(item));
        }
        return returns;
    });
}
exports.asyncMap = asyncMap;
function writeProm(data, file) {
    return new Promise((resolve, reject) => {
        fs_extra_1.writeFile(file, data, (err) => {
            if (err) {
                return reject(err);
            }
            return resolve();
        });
    });
}
exports.writeProm = writeProm;
function readJsonProm(path) {
    return new Promise((resolve, reject) => {
        fs_extra_1.readJson(path, (err, r) => {
            if (err) {
                return reject(err);
            }
            return resolve(r);
        });
    });
}
exports.readJsonProm = readJsonProm;

//# sourceMappingURL=data:application/json;base64,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RCxtQkFBMEIsSUFBSSxFQUFFLElBQUk7SUFDbEMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07UUFDakMsb0JBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRztZQUN4QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDcEIsQ0FBQztZQUNELE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNsQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUwsQ0FBQztBQVZlLGlCQUFTLFlBVXhCLENBQUE7QUFFRCxzQkFBNkIsSUFBSTtJQUMvQixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxtQkFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFNO1lBQ3pCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQixDQUFDO1lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQVRlLG9CQUFZLGVBUzNCLENBQUEiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBnbG9iIGZyb20gXCJnbG9iXCI7XG5pbXBvcnQgeyBjb3B5LCBlbnN1cmVEaXIsIHJlYWRKc29uLCBjcmVhdGVSZWFkU3RyZWFtLCB3cml0ZUZpbGUsIHN0YXQsIFN0YXRzIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5UHJvbShzcmMsIHRhcmcpOiBQcm9taXNlPHt9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29weShzcmMsIHRhcmcsIHtjbG9iYmVyOiB0cnVlfSwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZSgpXG4gICAgfSlcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnbG9iUHJvbShwYXRoLCBjd2Q/KTogUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZ2xvYihwYXRoLCB7XG4gICAgICBjd2Q6IGN3ZCA/IGN3ZDogcHJvY2Vzcy5jd2QoKVxuICAgIH0sIChlcnIsIHBhdGhzKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNvbHZlKHBhdGhzKTtcbiAgICB9KVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4aXN0c1Byb20ocGF0aDogc3RyaW5nKTogUHJvbWlzZTx7ZmlsZTogYm9vbGVhbiwgZGlyOiBib29sZWFufT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHN0YXQocGF0aCwgKGVyciwgc3RhdHM6IFN0YXRzKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh7ZmlsZTogc3RhdHMuaXNGaWxlKCksIGRpcjogc3RhdHMuaXNEaXJlY3RvcnkoKX0pXG4gICAgfSlcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXIocGF0aCk6IFByb21pc2U8e30+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBlbnN1cmVEaXIocGF0aCwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXN5bmNNYXAoYXJyYXk6IEFycmF5PGFueT4sIGY6ICh4OiBhbnkpID0+IGFueSk6IFByb21pc2U8QXJyYXk8YW55Pj4ge1xuICBsZXQgcmV0dXJucyA9IFtdO1xuICBmb3IgKGxldCBpdGVtIG9mIGFycmF5KSB7XG4gICAgcmV0dXJucy5wdXNoKGF3YWl0IGYoaXRlbSkpO1xuICB9XG4gIHJldHVybiByZXR1cm5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVQcm9tKGRhdGEsIGZpbGUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB3cml0ZUZpbGUoZmlsZSwgZGF0YSwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNvbHZlKClcbiAgICB9KVxuICB9KTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEpzb25Qcm9tKHBhdGgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZWFkSnNvbihwYXRoLCAoZXJyLCByOiBhbnkpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmUocilcbiAgICB9KVxuICB9KTtcbn0iXSwic291cmNlUm9vdCI6Ii9Vc2Vycy9lbXVycmF5L1dlYnN0b3JtUHJvamVjdHMvbGVkZS9zcmMifQ==
