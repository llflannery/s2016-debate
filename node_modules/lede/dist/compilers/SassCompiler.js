"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const fs_extra_1 = require("fs-extra");
const node_sass_1 = require("node-sass");
const path_1 = require('path');
function asyncMap(array, f) {
    return __awaiter(this, void 0, Promise, function* () {
        let returns = [];
        for (let item of array) {
            returns.push(yield f(item));
        }
        return returns;
    });
}
class SassCompiler {
    constructor(options = { includePaths: [], outputStyle: 'compact', sourceComments: false, sourceMapEmbed: false }) {
        this.options = options;
    }
    compile(report, bits) {
        return __awaiter(this, void 0, void 0, function* () {
            this.options.includePaths.push(path_1.join(report.workingDirectory, '.ledeCache', 'styles'));
            let compiledGlobals = yield SassCompiler.compileGlobals(report, Object.assign({}, this.options));
            let compiledBits = yield SassCompiler.compileBits(report, Object.assign({}, this.options), bits);
            return {
                globals: compiledGlobals,
                bits: compiledBits
            };
        });
    }
    static compileBits(report, options, bits) {
        return __awaiter(this, void 0, void 0, function* () {
            let bitPaths = bits.map(b => path_1.join(report.workingDirectory, '.ledeCache', 'bits', b, 'style.scss'));
            let compiledBits = yield asyncMap(bitPaths, (b) => __awaiter(this, void 0, void 0, function* () {
                return yield SassCompiler.renderFile(options, b);
            }));
            return compiledBits.join('');
        });
    }
    static compileGlobals(report, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let stylesDir = path_1.join(report.workingDirectory, '.ledeCache', 'styles');
            let opts = Object.assign({}, options);
            let styleSheets = yield asyncMap(report.styles, (f) => __awaiter(this, void 0, void 0, function* () {
                return yield SassCompiler.renderFile(opts, path_1.join(stylesDir, f));
            }));
            return styleSheets.join('');
        });
    }
    static renderFile(options, filePath) {
        let stream = fs_extra_1.createReadStream(filePath);
        let data = "";
        return new Promise((resolve, reject) => {
            stream.on('data', d => data += d.toString());
            stream.on('end', () => {
                if (!data) {
                    return resolve("");
                }
                node_sass_1.render({
                    data: data,
                    includePaths: options.includePaths,
                    outputStyle: options.outputStyle,
                    sourceComments: options.sourceComments,
                    sourceMapEmbed: options.sourceMapEmbed
                }, (err, res) => {
                    if (err) {
                        return reject(err);
                    }
                    return resolve(res.css.toString());
                });
            });
        });
    }
}
exports.SassCompiler = SassCompiler;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBpbGVycy9TYXNzQ29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMkJBQWlDLFVBQVUsQ0FBQyxDQUFBO0FBQzVDLDRCQUFnQyxXQUFXLENBQUMsQ0FBQTtBQUM1Qyx1QkFBcUIsTUFBTSxDQUFDLENBQUE7QUFJNUIsa0JBQXdCLEtBQWlCLEVBQUUsQ0FBa0I7O1FBQzNELElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBQUE7QUFFRDtJQUVFLFlBQW1CLE9BQU8sR0FBRyxFQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUM7UUFBbEcsWUFBTyxHQUFQLE9BQU8sQ0FBMkY7SUFDckgsQ0FBQztJQUVLLE9BQU8sQ0FBQyxNQUFxQixFQUFFLElBQUk7O1lBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RGLElBQUksZUFBZSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakcsSUFBSSxZQUFZLEdBQUcsTUFBTSxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMs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bGVycy9TYXNzQ29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZWFkU3RyZWFtIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyByZW5kZXIsIE9wdGlvbnMgfSBmcm9tIFwibm9kZS1zYXNzXCI7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IFByb2plY3RSZXBvcnQgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9Qcm9qZWN0UmVwb3J0XCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGFzeW5jTWFwKGFycmF5OiBBcnJheTxhbnk+LCBmOiAoeDogYW55KSA9PiBhbnkpOiBQcm9taXNlPEFycmF5PGFueT4+IHtcbiAgbGV0IHJldHVybnMgPSBbXTtcbiAgZm9yIChsZXQgaXRlbSBvZiBhcnJheSkge1xuICAgIHJldHVybnMucHVzaChhd2FpdCBmKGl0ZW0pKTtcbiAgfVxuICByZXR1cm4gcmV0dXJucztcbn1cblxuZXhwb3J0IGNsYXNzIFNhc3NDb21waWxlciB7XG5cbiAgY29uc3RydWN0b3IocHVibGljIG9wdGlvbnMgPSB7aW5jbHVkZVBhdGhzOiBbXSwgb3V0cHV0U3R5bGU6ICdjb21wYWN0Jywgc291cmNlQ29tbWVudHM6IGZhbHNlLCBzb3VyY2VNYXBFbWJlZDogZmFsc2V9KSB7XG4gIH1cblxuICBhc3luYyBjb21waWxlKHJlcG9ydDogUHJvamVjdFJlcG9ydCwgYml0cykge1xuICAgIHRoaXMub3B0aW9ucy5pbmNsdWRlUGF0aHMucHVzaChqb2luKHJlcG9ydC53b3JraW5nRGlyZWN0b3J5LCAnLmxlZGVDYWNoZScsICdzdHlsZXMnKSk7XG4gICAgbGV0IGNvbXBpbGVkR2xvYmFscyA9IGF3YWl0IFNhc3NDb21waWxlci5jb21waWxlR2xvYmFscyhyZXBvcnQsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucykpO1xuICAgIGxldCBjb21waWxlZEJpdHMgPSBhd2FpdCBTYXNzQ29tcGlsZXIuY29tcGlsZUJpdHMocmVwb3J0LCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpLCBiaXRzKTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2xvYmFsczogY29tcGlsZWRHbG9iYWxzLFxuICAgICAgYml0czogY29tcGlsZWRCaXRzXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNvbXBpbGVCaXRzKHJlcG9ydDogUHJvamVjdFJlcG9ydCwgb3B0aW9uczogT3B0aW9ucywgYml0cykge1xuICAgIGxldCBiaXRQYXRocyA9IGJpdHMubWFwKGIgPT4gam9pbihyZXBvcnQud29ya2luZ0RpcmVjdG9yeSwgJy5sZWRlQ2FjaGUnLCAnYml0cycsIGIsICdzdHlsZS5zY3NzJykpO1xuICAgIGxldCBjb21waWxlZEJpdHMgPSBhd2FpdCBhc3luY01hcChiaXRQYXRocywgYXN5bmMgKGIpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBTYXNzQ29tcGlsZXIucmVuZGVyRmlsZShvcHRpb25zLCBiKVxuICAgIH0pO1xuICAgIHJldHVybiBjb21waWxlZEJpdHMuam9pbignJyk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY29tcGlsZUdsb2JhbHMocmVwb3J0OiBQcm9qZWN0UmVwb3J0LCBvcHRpb25zOiBPcHRpb25zKSB7XG4gICAgbGV0IHN0eWxlc0RpciA9IGpvaW4ocmVwb3J0LndvcmtpbmdEaXJlY3RvcnksICcubGVkZUNhY2hlJywgJ3N0eWxlcycpO1xuICAgIGxldCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgbGV0IHN0eWxlU2hlZXRzID0gYXdhaXQgYXN5bmNNYXAocmVwb3J0LnN0eWxlcywgYXN5bmMoZikgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IFNhc3NDb21waWxlci5yZW5kZXJGaWxlKG9wdHMsIGpvaW4oc3R5bGVzRGlyLCBmKSlcbiAgICB9KTtcblxuICAgIHJldHVybiBzdHlsZVNoZWV0cy5qb2luKCcnKTtcbiAgfVxuXG4gIHN0YXRpYyByZW5kZXJGaWxlKG9wdGlvbnMsIGZpbGVQYXRoKSB7XG4gICAgbGV0IHN0cmVhbSA9IGNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpO1xuICAgIGxldCBkYXRhID0gXCJcIjtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc3RyZWFtLm9uKCdkYXRhJywgZCA9PiBkYXRhICs9IGQudG9TdHJpbmcoKSk7XG4gICAgICBzdHJlYW0ub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoXCJcIilcbiAgICAgICAgfVxuICAgICAgICByZW5kZXIoXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGluY2x1ZGVQYXRoczogb3B0aW9ucy5pbmNsdWRlUGF0aHMsXG4gICAgICAgICAgICBvdXRwdXRTdHlsZTogb3B0aW9ucy5vdXRwdXRTdHlsZSxcbiAgICAgICAgICAgIHNvdXJjZUNvbW1lbnRzOiBvcHRpb25zLnNvdXJjZUNvbW1lbnRzLFxuICAgICAgICAgICAgc291cmNlTWFwRW1iZWQ6IG9wdGlvbnMuc291cmNlTWFwRW1iZWRcbiAgICAgICAgICB9XG4gICAgICAgICAgLCAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzLmNzcy50b1N0cmluZygpKVxuICAgICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9Vc2Vycy9lbXVycmF5L1dlYnN0b3JtUHJvamVjdHMvbGVkZS9zcmMifQ==
