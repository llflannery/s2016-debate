"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const nunjucks_1 = require("nunjucks");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
function readStreamProm(path) {
    let data = "";
    let stream = fs_extra_1.createReadStream(path);
    return new Promise((resolve, reject) => {
        stream.on('data', d => data += d.toString());
        stream.on('end', () => resolve(data));
        stream.on('error', e => reject(e));
    });
}
class NunjucksCompiler {
    constructor(opts = { watch: false, noCache: true, autoescape: false }) {
        this.opts = opts;
    }
    compile(report, compilers) {
        return __awaiter(this, void 0, void 0, function* () {
            let bits = NunjucksCompiler.getUsedBits(report);
            let stylesBlock = yield NunjucksCompiler.createStyleBlock(report, bits, compilers.css);
            let scriptsBlock = yield NunjucksCompiler.createScriptsBlock(report, bits, compilers.js);
            let shell = yield NunjucksCompiler.createShell(report, stylesBlock, scriptsBlock);
            return {
                index: yield NunjucksCompiler.renderTemplate(report, shell, this.opts),
                scripts: scriptsBlock,
                styles: stylesBlock,
                cachePath: path_1.join(report.workingDirectory, '.ledeCache')
            };
        });
    }
    static createScriptsBlock(report, bits, compiler) {
        return __awaiter(this, void 0, void 0, function* () {
            let scripts = yield compiler.compile(report, bits);
            return {
                file: 'globalScripts.js',
                data: `
// GLOBALS
${scripts.globals}
// BITS
${scripts.bits}
`
            };
        });
    }
    static getUsedBits(report) {
        let visitedBits = [];
        if (report.context.content.ARTICLE) {
            for (let bit of report.context.content.ARTICLE) {
                if (!(visitedBits.indexOf(bit.tmpl) > -1)) {
                    visitedBits.push(bit.tmpl);
                }
            }
        }
        return visitedBits;
    }
    static renderTemplate(report, template, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            let loader = new nunjucks_1.FileSystemLoader();
            loader.init([path_1.join(report.workingDirectory, '.ledeCache', 'bits')], opts);
            let env = new nunjucks_1.Environment(loader);
            if (opts.filters) {
                for (let f of opts.filters) {
                    env.addFilter(f.name, f.fn);
                }
            }
            let tmpl = new nunjucks_1.Template(template, env);
            return tmpl.render(report.context);
        });
    }
    static createStyleBlock(report, bits, compiler) {
        return __awaiter(this, void 0, void 0, function* () {
            let styles = yield compiler.compile(report, bits);
            return {
                file: 'globalStyles.css',
                data: `
/* GLOBALS */
${styles.globals}
/* BITS */
${styles.bits}
`
            };
        });
    }
    static createShell(report, stylesBlock, scriptsBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            let pageTop = `
<!DOCTYPE html>

<html>
<head>
  <title>{{seo.title}}</title>
  {% for item in seo.meta -%}
  <meta{%if item.name %} name="{{item.name}}"{% endif %}{% if item.content %} content="{{item.content}}"{% endif %}{% if item.props | length %}{% for prop in item.props %} {{prop.prop}}="{{prop.val}}"{% endfor %}{% endif %} />
  {% endfor %}{% if $debug -%}
  <meta NAME="ROBOTS" CONTENT="NOINDEX, NOFOLLOW">
  {%- endif %}
  <link rel="stylesheet" type="text/css" href="${stylesBlock.file}">
  {% if headLinks %}
    {% for link in headLinks %}
      {{ link | safe }}
    {% endfor %}
  {% endif %}
</head>
<body>
`;
            let pageBottom = `
  <script type="text/javascript" src="${scriptsBlock.file}"></script>
  {% if bodyLinks %}
    {% for link in bodyLinks %}
      {{ link | safe }}
    {% endfor %}
  {% endif %}
  {% if $debug %}
<script>
  document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] +
  ':35729/livereload.js?snipver=1"></' + 'script>')
</script>{% endif %}
</body>
</html>
`;
            let middle = '';
            for (let block of report.blocks) {
                if (block !== 'ARTICLE') {
                    middle += yield readStreamProm(path_1.join(report.workingDirectory, '.ledeCache', 'blocks', block));
                }
                else {
                    middle += `<article id="ledeRoot" class="container">
          <div class="row">
            <div class="col-lg-8 col-lg-offset-2 main-column">
            {% for bit in content.ARTICLE %}{% include bit.tmpl + "/tmpl.html" %}
            {% endfor %}
            </div>
          </div>
        </article>`;
                }
            }
            return pageTop + middle + pageBottom;
        });
    }
}
exports.NunjucksCompiler = NunjucksCompiler;

//# sourceMappingURL=data:application/json;base64,
