"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const DependencyAssembler_1 = require("./DependencyAssembler");
const CacheBuilder_1 = require("./CacheBuilder");
class Lede {
    constructor(workingDir, compilers, deployers, logger) {
        this.workingDir = workingDir;
        this.compilers = compilers;
        this.deployers = deployers;
        this.logger = logger;
    }
    deploy(deployer, debug = true, pr) {
        return __awaiter(this, void 0, Promise, function* () {
            if (!pr) {
                pr = yield Lede.assembleDeps(this.workingDir, this.logger);
            }
            pr.context.$debug = debug;
            yield Lede.buildCache(pr, this.logger);
            let compiledPage = yield Lede.compilePage(this.compilers, pr, this.logger);
            deployer = this.deployers[deployer];
            yield Lede.deployPage(deployer, pr, compiledPage, this.logger);
            return pr;
        });
    }
    static deployPage(deployer, projReport, compiledPage, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.debug({ deployer: deployer, projReport: projReport, compiledPage: compiledPage });
            logger.info("Deploying project.");
            try {
                yield deployer.deploy({ report: projReport, compiledPage: compiledPage });
            }
            catch (e) {
                logger.error({ err: e }, "Error deploying project.");
            }
        });
    }
    static compilePage(compilers, proj, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.info("Compiling project.");
            logger.debug({ projectReport: proj });
            try {
                return yield compilers.html.compile(proj, { css: compilers.css, js: compilers.js });
            }
            catch (e) {
                logger.error({ err: e }, "Error compiling page.");
            }
        });
    }
    static assembleDeps(workingDir, logger) {
        return __awaiter(this, void 0, Promise, function* () {
            try {
                logger.debug({ workingDir: workingDir });
                logger.info("Assembling dependencies");
                let da = new DependencyAssembler_1.DependencyAssembler(workingDir);
                return yield da.assemble();
            }
            catch (e) {
                logger.error({ err: e });
                if (e.code === "CircularDepError") {
                    logger.info(`${e.message} depends on a project which depends on itself.`);
                }
                else if (e.code === "NotAFile") {
                    logger.info(`${e.message} is not a file.`);
                }
            }
        });
    }
    static buildCache(proj, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                logger.info("Caching assets");
                let cb = new CacheBuilder_1.CacheBuilder(proj);
                yield cb.buildCache();
            }
            catch (e) {
                logger.error({ err: e }, "Error creating cache");
            }
        });
    }
    static buildProject(logger, projectReport) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof projectReport === "string") {
                projectReport = yield Lede.assembleDeps(projectReport, logger);
            }
            yield Lede.buildCache(projectReport, logger);
        });
    }
}
exports.Lede = Lede;

//# sourceMappingURL=data:application/json;base64,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QUMsS0FBSyxDQUFDLEVBQUMsR0FBRyxFQUFFLENBQUMsRUFBQyxFQUFFLHNCQUFzQixDQUFDLENBQUM7WUFDakQsQ0FBQztRQUNILENBQUM7S0FBQTtJQUVELE9BQWEsWUFBWSxDQUFDLE1BQU0sRUFBRSxhQUE4RDs7WUFDOUYsRUFBRSxDQUFDLENBQUMsT0FBTyxhQUFhLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDdEMsYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBUyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekUsQ0FBQztZQUNELE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBZ0IsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlELENBQUM7S0FBQTtBQUNILENBQUM7QUF6RVksWUFBSSxPQXlFaEIsQ0FBQSIsImZpbGUiOiJsZWRlL0xlZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9qZWN0UmVwb3J0LCBDb21waWxlZFBhZ2UgfSBmcm9tIFwiLi4vaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgRGVwZW5kZW5jeUFzc2VtYmxlciB9IGZyb20gXCIuL0RlcGVuZGVuY3lBc3NlbWJsZXJcIjtcbmltcG9ydCB7IENhY2hlQnVpbGRlciB9IGZyb20gXCIuL0NhY2hlQnVpbGRlclwiO1xuXG5cbmV4cG9ydCBjbGFzcyBMZWRlIHtcbiAgZGVwZW5kZW5jeUFzc2VtYmxlcjogRGVwZW5kZW5jeUFzc2VtYmxlcjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgd29ya2luZ0RpciwgcHVibGljIGNvbXBpbGVyczogYW55LCBwdWJsaWMgZGVwbG95ZXJzOiBhbnksIHB1YmxpYyBsb2dnZXI6IGFueSkge1xuICB9XG5cbiAgYXN5bmMgZGVwbG95KGRlcGxveWVyOiBzdHJpbmcsIGRlYnVnID0gdHJ1ZSwgcHI/OiBQcm9qZWN0UmVwb3J0KTogUHJvbWlzZTxQcm9qZWN0UmVwb3J0PiB7XG4gICAgaWYgKCFwcikge1xuICAgICAgcHIgPSBhd2FpdCBMZWRlLmFzc2VtYmxlRGVwcyh0aGlzLndvcmtpbmdEaXIsIHRoaXMubG9nZ2VyKTtcbiAgICB9XG5cbiAgICBwci5jb250ZXh0LiRkZWJ1ZyA9IGRlYnVnO1xuXG4gICAgYXdhaXQgTGVkZS5idWlsZENhY2hlKDxQcm9qZWN0UmVwb3J0PnByLCB0aGlzLmxvZ2dlcik7XG4gICAgbGV0IGNvbXBpbGVkUGFnZSA9IGF3YWl0IExlZGUuY29tcGlsZVBhZ2UodGhpcy5jb21waWxlcnMsIHByLCB0aGlzLmxvZ2dlcik7XG4gICAgZGVwbG95ZXIgPSA8YW55PnRoaXMuZGVwbG95ZXJzW2RlcGxveWVyXTtcbiAgICBhd2FpdCBMZWRlLmRlcGxveVBhZ2UoZGVwbG95ZXIsIDxQcm9qZWN0UmVwb3J0PnByLCBjb21waWxlZFBhZ2UsIHRoaXMubG9nZ2VyKTtcbiAgICByZXR1cm4gPFByb2plY3RSZXBvcnQ+cHI7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZGVwbG95UGFnZShkZXBsb3llciwgcHJvalJlcG9ydDogUHJvamVjdFJlcG9ydCwgY29tcGlsZWRQYWdlOiBDb21waWxlZFBhZ2UsIGxvZ2dlcikge1xuICAgIGxvZ2dlci5kZWJ1Zyh7ZGVwbG95ZXIsIHByb2pSZXBvcnQsIGNvbXBpbGVkUGFnZX0pO1xuICAgIGxvZ2dlci5pbmZvKFwiRGVwbG95aW5nIHByb2plY3QuXCIpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBkZXBsb3llci5kZXBsb3koe3JlcG9ydDogcHJvalJlcG9ydCwgY29tcGlsZWRQYWdlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyLmVycm9yKHtlcnI6IGV9LCBcIkVycm9yIGRlcGxveWluZyBwcm9qZWN0LlwiKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY29tcGlsZVBhZ2UoY29tcGlsZXJzLCBwcm9qOiBQcm9qZWN0UmVwb3J0LCBsb2dnZXIpIHtcbiAgICBsb2dnZXIuaW5mbyhcIkNvbXBpbGluZyBwcm9qZWN0LlwiKTtcbiAgICBsb2dnZXIuZGVidWcoe3Byb2plY3RSZXBvcnQ6IHByb2p9KTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGNvbXBpbGVycy5odG1sLmNvbXBpbGUocHJvaiwge2NzczogY29tcGlsZXJzLmNzcywganM6IGNvbXBpbGVycy5qc30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcih7ZXJyOiBlfSwgXCJFcnJvciBjb21waWxpbmcgcGFnZS5cIik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGFzc2VtYmxlRGVwcyh3b3JraW5nRGlyOiBzdHJpbmcsIGxvZ2dlcik6IFByb21pc2U8UHJvamVjdFJlcG9ydD4ge1xuICAgIHRyeSB7XG4gICAgICBsb2dnZXIuZGVidWcoe3dvcmtpbmdEaXJ9KTtcbiAgICAgIGxvZ2dlci5pbmZvKFwiQXNzZW1ibGluZyBkZXBlbmRlbmNpZXNcIik7XG4gICAgICBsZXQgZGEgPSBuZXcgRGVwZW5kZW5jeUFzc2VtYmxlcih3b3JraW5nRGlyKTtcbiAgICAgIHJldHVybiBhd2FpdCBkYS5hc3NlbWJsZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcih7ZXJyOiBlfSk7XG4gICAgICBpZiAoZS5jb2RlID09PSBcIkNpcmN1bGFyRGVwRXJyb3JcIikge1xuICAgICAgICBsb2dnZXIuaW5mbyhgJHtlLm1lc3NhZ2V9IGRlcGVuZHMgb24gYSBwcm9qZWN0IHdoaWNoIGRlcGVuZHMgb24gaXRzZWxmLmApXG4gICAgICB9IGVsc2UgaWYgKGUuY29kZSA9PT0gXCJOb3RBRmlsZVwiKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKGAke2UubWVzc2FnZX0gaXMgbm90IGEgZmlsZS5gKVxuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGJ1aWxkQ2FjaGUocHJvajogUHJvamVjdFJlcG9ydCwgbG9nZ2VyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvZ2dlci5pbmZvKFwiQ2FjaGluZyBhc3NldHNcIik7XG4gICAgICBsZXQgY2IgPSBuZXcgQ2FjaGVCdWlsZGVyKHByb2opO1xuICAgICAgYXdhaXQgY2IuYnVpbGRDYWNoZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcih7ZXJyOiBlfSwgXCJFcnJvciBjcmVhdGluZyBjYWNoZVwiKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgYnVpbGRQcm9qZWN0KGxvZ2dlciwgcHJvamVjdFJlcG9ydDogUHJvamVjdFJlcG9ydCB8IHN0cmluZyB8IFByb21pc2U8UHJvamVjdFJlcG9ydD4pIHtcbiAgICBpZiAodHlwZW9mIHByb2plY3RSZXBvcnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHByb2plY3RSZXBvcnQgPSBhd2FpdCBMZWRlLmFzc2VtYmxlRGVwcyg8c3RyaW5nPnByb2plY3RSZXBvcnQsIGxvZ2dlcik7XG4gICAgfVxuICAgIGF3YWl0IExlZGUuYnVpbGRDYWNoZSg8UHJvamVjdFJlcG9ydD5wcm9qZWN0UmVwb3J0LCBsb2dnZXIpO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIvVXNlcnMvZW11cnJheS9XZWJzdG9ybVByb2plY3RzL2xlZGUvc3JjIn0=
