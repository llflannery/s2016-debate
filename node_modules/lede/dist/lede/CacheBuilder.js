"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const fs_extra_1 = require('fs-extra');
const rmrf = require('rimraf');
const path_1 = require('path');
const utils_1 = require('../utils');
class CacheBuilder {
    constructor(project) {
        this.project = project;
    }
    buildCache() {
        return __awaiter(this, void 0, void 0, function* () {
            let cacheDir = path_1.join(this.project.workingDirectory, '.ledeCache');
            yield CacheBuilder.createCache(this.project.dependencies, cacheDir);
            yield CacheBuilder.buildDepCache(this.project.dependencies, cacheDir);
        });
    }
    static buildDepCache(deps, buildDir) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let dep of deps) {
                let currPath = dep.workingDir;
                let globalStyles = yield utils_1.globProm("styles/*", currPath);
                let bits = yield utils_1.globProm("bits/*", currPath);
                let scripts = yield utils_1.globProm("scripts/*", currPath);
                let blocks = yield utils_1.globProm("blocks/*", currPath);
                let assets = yield utils_1.globProm("assets/*", currPath);
                for (let s of globalStyles) {
                    yield utils_1.copyProm(path_1.join(currPath, s), path_1.join(buildDir, "styles", dep.name, path_1.basename(s)));
                }
                for (let s of bits) {
                    yield utils_1.copyProm(path_1.join(currPath, s), path_1.join(buildDir, "bits", dep.name, path_1.basename(s)));
                }
                for (let s of scripts) {
                    yield utils_1.copyProm(path_1.join(currPath, s), path_1.join(buildDir, "scripts", dep.name, path_1.basename(s)));
                }
                for (let s of blocks) {
                    yield utils_1.copyProm(path_1.join(currPath, s), path_1.join(buildDir, "blocks", dep.name, path_1.basename(s)));
                }
                for (let s of assets) {
                    yield utils_1.copyProm(path_1.join(currPath, s), path_1.join(buildDir, "assets", dep.name, path_1.basename(s)));
                }
            }
        });
    }
    static createCache(deps, cacheDir) {
        return new Promise((resolve, reject) => {
            fs_extra_1.stat(cacheDir, (err, stats) => {
                if (err && err.code !== 'ENOENT') {
                    reject(err);
                }
                else if (stats && stats.isFile()) {
                    reject(new Error('Cannot have file named .ledeCache in project'));
                }
                else if (stats && stats.isDirectory()) {
                    rmrf(cacheDir, () => {
                        createDirAndDeps(resolve);
                    });
                }
                else {
                    createDirAndDeps(resolve);
                }
            });
        });
        function createDirAndDeps(resolve) {
            return __awaiter(this, void 0, void 0, function* () {
                yield utils_1.createDir(cacheDir);
                for (let dep of deps) {
                    yield utils_1.createDir(path_1.join(cacheDir, 'bits', dep.name));
                    yield utils_1.createDir(path_1.join(cacheDir, 'styles', dep.name));
                    yield utils_1.createDir(path_1.join(cacheDir, 'scripts', dep.name));
                    yield utils_1.createDir(path_1.join(cacheDir, 'blocks', dep.name));
                    yield utils_1.createDir(path_1.join(cacheDir, 'assets', dep.name));
                }
                resolve();
            });
        }
    }
}
exports.CacheBuilder = CacheBuilder;

//# sourceMappingURL=data:application/json;base64,
