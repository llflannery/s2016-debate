"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const lodash_1 = require("lodash");
const fs_extra_1 = require("fs-extra");
const https_1 = require("https");
const path_1 = require("path");
const os_1 = require("os");
const errors_1 = require("../errors");
const aml = require('archieml');
class DependencyAssembler {
    constructor(workingDir) {
        this.workingDir = workingDir;
    }
    /**
     * This will fetch all project dependencies, merge all baseContexts and fetch, parse, and merge all googleapis
     * content.
     * @returns {Promise<ProjectReport>}
     */
    assemble() {
        return __awaiter(this, void 0, Promise, function* () {
            let deps = yield DependencyAssembler.buildDependencies(this.workingDir);
            let origDep = deps[deps.length - 1];
            let context = lodash_1.merge(yield DependencyAssembler.buildContext(deps), { content: yield DependencyAssembler.buildContent(deps) }, { $projectName: origDep.name });
            return {
                workingDirectory: this.workingDir,
                context: context,
                dependencies: deps,
                styles: origDep.styles,
                scripts: origDep.scripts,
                blocks: origDep.blocks
            };
        });
    }
    /**
     * This method takes a rootDepDir string and returns a promise containing an ordered array of dependencies. Deps[0]
     * is the most-basic dependency; Deps[Deps.length - 1] is the project in rootDepDir.
     * @param rootDepDir - directory for starting dependency
     * @returns {Promise<Dependency[]>} - ordered list of dependencies
     */
    static buildDependencies(rootDepDir) {
        return __awaiter(this, void 0, Promise, function* () {
            return yield DependencyAssembler.reportOnDep(rootDepDir).then(r => DependencyAssembler.followLeaves(r, [], []));
        });
    }
    /**
     * Generates a Node on the dependency tree.
     * @param dir
     * @param calledBy
     * @returns {Promise<NodeReport>}
     */
    static reportOnDep(dir) {
        return __awaiter(this, void 0, Promise, function* () {
            let settings = yield DependencyAssembler.gatherSettings(dir);
            let leaves = [];
            for (let proj of settings.dependsOn) {
                leaves.push(path_1.resolve(settings.inheritanceRoot, proj));
            }
            settings.workingDir = dir;
            return { node: dir, settings: settings, leaves: leaves };
        });
    }
    /**
     * This method creates an ordered array of dependencies by following the specified node all the way to it's root
     * @param nodeReport
     * @param settingsArr
     * @param visited
     * @throws CircularDepError - thrown when a $currNode has a dependency on a node that depends on $currNode
     * @returns {Array<Dependency>}
     */
    static followLeaves(nodeReport, settingsArr, visited) {
        return __awaiter(this, void 0, Promise, function* () {
            visited.push(nodeReport.node);
            for (let leaf of nodeReport.leaves) {
                let leafReport = yield DependencyAssembler.reportOnDep(leaf);
                if (!(settingsArr.map(x => x.name).indexOf(leafReport.settings.name) > -1)) {
                    if (visited.indexOf(leafReport.node) > -1) {
                        throw new errors_1.CircularDepError(leafReport.node);
                    }
                    settingsArr = yield DependencyAssembler.followLeaves(leafReport, settingsArr, visited);
                }
            }
            settingsArr.push(nodeReport.settings);
            return settingsArr;
        });
    }
    /**
     * Gathers projectSettings file from specified directory and initializes then merges with default
     * @param dir
     * @returns {Promise<Dependency>}
     */
    static gatherSettings(dir) {
        return new Promise((resolve, reject) => {
            let path = path_1.resolve(dir, 'projectSettings.js');
            fs_extra_1.stat(path, (err, stats) => {
                if ((err && err.code === 'ENOENT') || !stats.isFile()) {
                    return reject(new errors_1.NotAFile(path));
                }
                else if (err) {
                    return reject(err);
                }
                else {
                    // Here we are importing a user-written module so we want to catch any errors it may throw
                    try {
                        let SettingsConfig = require(path).default;
                        let settings = new SettingsConfig();
                        return resolve(DependencyAssembler.setDepDefaults(settings));
                    }
                    catch (e) {
                        return reject(e);
                    }
                }
            });
        });
    }
    static setDepDefaults(settings) {
        if (!settings.inheritanceRoot) {
            settings.inheritanceRoot = process.env.LEDE_HOME ? path_1.resolve(os_1.homedir(), process.env.LEDE_HOME) : path_1.resolve(os_1.homedir(), "LedeProjects");
        }
        if (!settings.blocks) {
            settings.blocks = ["ARTICLE"];
        }
        if (!settings.scripts) {
            settings.scripts = [];
        }
        if (!settings.styles) {
            settings.styles = [];
        }
        if (!settings.name) {
            settings.name = "defaultLedeProject";
        }
        if (!settings.assets) {
            settings.assets = [];
        }
        if (!settings.googleFileId) {
            settings.googleFileId = "";
        }
        if (!settings.dependsOn) {
            settings.dependsOn = [];
        }
        return settings;
    }
    /**
     * Takes and array of dependencies, gathers baseContext (if any), and then merges child contexts onto root context.
     * @param deps
     * @returns {Promise<any>}
     */
    static buildContext(deps) {
        return __awaiter(this, void 0, Promise, function* () {
            let contexts = [];
            for (let dep of deps) {
                try {
                    let context = yield DependencyAssembler.gatherContext(dep.workingDir);
                    contexts.push(context);
                }
                catch (e) {
                    if (e.code === 'NotAFile') {
                    }
                    else {
                        throw e;
                    }
                }
            }
            return lodash_1.merge(...contexts);
        });
    }
    /**
     * Looks for and resolves a baseContext.js file if it exists in the directory. If ENOENT, resolves with an empty
     * object.
     * @param searchDir
     * @returns {Promise<any>}
     */
    static gatherContext(searchDir) {
        return new Promise((resolve, reject) => {
            let pathToContext = path_1.resolve(searchDir, 'baseContext.js');
            fs_extra_1.stat(pathToContext, (err, stats) => {
                if (err && err.code === 'ENOENT') {
                    return resolve({});
                }
                else if (err) {
                    return reject(err);
                }
                else if (!err && stats.isFile()) {
                    // Here we are importing a user-written modules so we want to catch any errors it may throw
                    try {
                        let Context = require(pathToContext).default;
                        return resolve(new Context());
                    }
                    catch (e) {
                        return reject(e);
                    }
                }
                else if (!stats.isFile()) {
                    return reject(new errors_1.NotAFile(pathToContext));
                }
            });
        });
    }
    /**
     * Gathers and merges content objects from deps if any
     * @param deps
     * @returns {Promise<Any>}
     */
    static buildContent(deps) {
        return __awaiter(this, void 0, Promise, function* () {
            let contents = [];
            for (let dep of deps) {
                if (dep.googleFileId) {
                    if (!process.env.GAPI_KEY) {
                        throw new Error("Must have a googleapis key saved in the env variable GAPI_KEY to access documents stored on google drive.");
                    }
                    let content = yield DependencyAssembler.fetchContent({ fileId: dep.googleFileId, apiKey: process.env.GAPI_KEY, parseFn: null });
                    contents.push(content);
                }
            }
            return lodash_1.merge(...contents);
        });
    }
    /**
     * Takes a resolver and returns the content it points to after passing it through the parser function. Defaults to
     * aml parser if none is specified.
     * @param resolver - Dependency content resolver taken from projectSettings.js for a project
     * @returns {Promise<Any>}
     */
    static fetchContent(resolver) {
        return new Promise((resolve, reject) => {
            let options = {
                hostname: 'www.googleapis.com',
                path: `/drive/v2/files/${resolver.fileId}?key=${resolver.apiKey}`,
                method: 'GET'
            };
            https_1.request(options, res => {
                let buffs = [];
                res.on('data', d => buffs.push(d));
                res.on('error', e => reject(e));
                res.on('end', () => {
                    let buffer = Buffer.concat(buffs);
                    let parsableResult = JSON.parse(buffer.toString('utf8'));
                    let plainUrl = parsableResult.exportLinks['text/plain'].slice(8);
                    options.hostname = plainUrl.split('/')[0];
                    options.path = `/${plainUrl.split('/').slice(1).join('/')}`;
                    https_1.request(options, res => {
                        let bufferArray = [];
                        res.on('data', d => bufferArray.push(d));
                        res.on('error', e => reject(e));
                        res.on('end', () => {
                            let buff = Buffer.concat(bufferArray);
                            if (!resolver.parseFn) {
                                resolve(aml.load(buff.toString('utf8')));
                            }
                            else {
                                resolve(resolver.parseFn(buff.toString('utf8')));
                            }
                        });
                    }).end();
                });
            }).end();
        });
    }
}
exports.DependencyAssembler = DependencyAssembler;

//# sourceMappingURL=data:application/json;base64,
