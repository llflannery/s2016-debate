"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const aws_sdk_1 = require("aws-sdk");
const path_1 = require("path");
const FileSystemDeployer_1 = require("./FileSystemDeployer");
const utils_1 = require("../utils");
const fs_extra_1 = require("fs-extra");
class S3Deployer extends FileSystemDeployer_1.FileSystemDeployer {
    constructor(deployDir, bucket, projName) {
        super(deployDir);
        this.bucket = bucket;
        this.projName = projName;
    }
    deploy(project) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("deploy").call(this, project);
            let toUpload = yield utils_1.globProm('**/*.*', this.deployDir);
            for (let file of toUpload) {
                yield S3Deployer.uploadToS3({ Bucket: this.bucket, filePath: path_1.resolve(this.deployDir, file), Key: `${this.projName}/${file}` });
            }
        });
    }
    static uploadToS3({ Bucket, Key, filePath }) {
        let contentType = null;
        let fileType = path_1.basename(filePath).split('.')[path_1.basename(filePath).split('.').length - 1];
        switch (fileType) {
            case 'json':
                contentType = "application/json";
                break;
            case 'css':
                contentType = "text/css";
                break;
            case 'jpg':
                contentType = "image/jpeg";
                break;
            case 'png':
                contentType = "image/png";
                break;
            case 'html':
                contentType = "text/html";
                break;
            case 'js':
                contentType = "application/javascript";
                break;
            default:
                contentType = "text/plain";
                break;
        }
        return new Promise((resolve, reject) => {
            let upload = new aws_sdk_1.S3.ManagedUpload({
                params: {
                    Bucket: Bucket,
                    Key: Key,
                    Body: fs_extra_1.createReadStream(filePath),
                    ACL: "bucket-owner-full-control",
                    ContentType: contentType
                }
            });
            upload.send((err, data) => {
                if (err) {
                    return reject(err);
                }
                return resolve();
            });
        });
    }
}
exports.S3Deployer = S3Deployer;

//# sourceMappingURL=data:application/json;base64,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QUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDcEIsQ0FBQztnQkFDRCxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7QUFFSCxDQUFDO0FBNURZLGtCQUFVLGFBNER0QixDQUFBIiwiZmlsZSI6ImRlcGxveWVycy9TM0RlcGxveWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUzMgfSBmcm9tIFwiYXdzLXNka1wiO1xuaW1wb3J0IHsgcmVzb2x2ZSwgYmFzZW5hbWUgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgRmlsZVN5c3RlbURlcGxveWVyIH0gZnJvbSBcIi4vRmlsZVN5c3RlbURlcGxveWVyXCI7XG5pbXBvcnQgeyBQcm9qZWN0UmVwb3J0LCBDb21waWxlZFBhZ2UgfSBmcm9tIFwiLi4vaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgZ2xvYlByb20gfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZVJlYWRTdHJlYW0gfSBmcm9tIFwiZnMtZXh0cmFcIjtcblxuXG5leHBvcnQgY2xhc3MgUzNEZXBsb3llciBleHRlbmRzIEZpbGVTeXN0ZW1EZXBsb3llciB7XG5cbiAgY29uc3RydWN0b3IoZGVwbG95RGlyOiBzdHJpbmcsIHB1YmxpYyBidWNrZXQsIHB1YmxpYyBwcm9qTmFtZSkge1xuICAgIHN1cGVyKGRlcGxveURpcik7XG4gIH1cblxuICBhc3luYyBkZXBsb3kocHJvamVjdDoge3JlcG9ydDogUHJvamVjdFJlcG9ydCwgY29tcGlsZWRQYWdlOiBDb21waWxlZFBhZ2V9KSB7XG4gICAgYXdhaXQgc3VwZXIuZGVwbG95KHByb2plY3QpO1xuICAgIGxldCB0b1VwbG9hZCA9IGF3YWl0IGdsb2JQcm9tKCcqKi8qLionLCB0aGlzLmRlcGxveURpcik7XG4gICAgZm9yIChsZXQgZmlsZSBvZiB0b1VwbG9hZCkge1xuICAgICAgYXdhaXQgUzNEZXBsb3llci51cGxvYWRUb1MzKFxuICAgICAgICB7QnVja2V0OiB0aGlzLmJ1Y2tldCwgZmlsZVBhdGg6IHJlc29sdmUodGhpcy5kZXBsb3lEaXIsIGZpbGUpLCBLZXk6IGAke3RoaXMucHJvak5hbWV9LyR7ZmlsZX1gfSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdXBsb2FkVG9TMyh7QnVja2V0LCBLZXksIGZpbGVQYXRofSkge1xuICAgIGxldCBjb250ZW50VHlwZSA9IG51bGw7XG4gICAgbGV0IGZpbGVUeXBlID0gYmFzZW5hbWUoZmlsZVBhdGgpLnNwbGl0KCcuJylbYmFzZW5hbWUoZmlsZVBhdGgpLnNwbGl0KCcuJykubGVuZ3RoIC0gMV07XG4gICAgc3dpdGNoIChmaWxlVHlwZSkge1xuICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY3NzJzpcbiAgICAgICAgY29udGVudFR5cGUgPSBcInRleHQvY3NzXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnanBnJzpcbiAgICAgICAgY29udGVudFR5cGUgPSBcImltYWdlL2pwZWdcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwbmcnOlxuICAgICAgICBjb250ZW50VHlwZSA9IFwiaW1hZ2UvcG5nXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJ0ZXh0L2h0bWxcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdqcyc6XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29udGVudFR5cGUgPSBcInRleHQvcGxhaW5cIjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgdXBsb2FkID0gbmV3IFMzLk1hbmFnZWRVcGxvYWQoe1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBCdWNrZXQsXG4gICAgICAgICAgS2V5LFxuICAgICAgICAgIEJvZHk6IGNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpLFxuICAgICAgICAgIEFDTDogXCJidWNrZXQtb3duZXItZnVsbC1jb250cm9sXCIsXG4gICAgICAgICAgQ29udGVudFR5cGU6IGNvbnRlbnRUeXBlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdXBsb2FkLnNlbmQoKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn0iXSwic291cmNlUm9vdCI6Ii9Vc2Vycy9lbXVycmF5L1dlYnN0b3JtUHJvamVjdHMvbGVkZS9zcmMifQ==
